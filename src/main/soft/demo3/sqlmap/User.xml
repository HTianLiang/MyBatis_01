<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--写sql语句
    namespace：命名空间
-->
<mapper namespace="soft.demo3.UserMapper">

    <!--sql片段 提取sql语句-->
    <sql id="selector">
        select * from user
    </sql>

    <select id="findUserById" parameterType="Integer" resultType="soft.demo1.pojo.User">
        <!--MyBatis占位符：#{参数} 不同与jdbc 参数可随便填写 例：v、n...-->
        select * from USER where id= #{n}
    </select>
    <!--根据用户名称模糊查询用户列表
        ${参数} 字符串拼接 参数只能填写value
        若改写成："%"#{参数}"%" 里边参数就可随意填写
    -->
    <select id="findUserByUsername" parameterType="String" resultType="soft.demo1.pojo.User">
        select * from USER where username like "%"#{str}"%"
    </select>
    <!--新增用户-->
    <insert id="insertUser" parameterType="soft.demo1.pojo.User">
        <!--获取刚刚新增用户ID-->
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user(username,birthday,sex,address)
        values (#{username},#{birthday},#{sex},#{address})
    </insert>
    <!--修改用户-->
    <update id="updateUserById" parameterType="soft.demo1.pojo.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
        where id=#{id}
    </update>
    <!--删除用户-->
    <delete id="deleteUserById" parameterType="Integer">
        delete from user where id = #{i}
    </delete>

    <!--根据用户名称模糊查询-->
    <select id="findUserByQueryVo" parameterType="soft.demo3.pojo.QueryVo" resultType="soft.demo1.pojo.User">
        select * from user where username like "%"#{user.username}"%"
    </select>

    <!--查询订单表Orders的所有数据-->
    <select id="countUser" resultType="Integer">
        select count(1) from user
    </select>

    <!--根据性别和名称查询用户
        where 标签 可以去掉第一个前的and
    -->
    <select id="findUserBySexAndName" parameterType="soft.demo1.pojo.User" resultType="soft.demo1.pojo.User">
        <include refid="selector"/>
        <where>
            <if test="sex !=null and sex !=''">
                sex = #{sex}
            </if>
            <if test="username !=null and username !=''">
                and username = #{username}
            </if>
        </where>
    </select>

    <!--&lt;!&ndash;根据多个Id查询用户 (1,2,3)-->
        <!--indUserByIds(QueryVo vo)方法实现-->
    <!--&ndash;&gt;-->
    <!--<select id="findUserByIds" parameterType="soft.demo3.pojo.QueryVo" resultType="soft.demo1.pojo.User">-->
        <!--<include refid="selector"/>-->
        <!--<where>-->
            <!--&#45;&#45; id in-->
            <!--<foreach collection="idlist" item="id" separator="," open="id in(" close=")">-->
                <!--#{id}-->
            <!--</foreach>-->
        <!--</where>-->
    <!--</select>-->
    <!--&lt;!&ndash;根据多个Id查询用户 (1,2,3)-->
         <!--findUserByIds(Integer[] ids)方法实现-->
         <!--使用此方法时 collection中应该填写Integer[] 中的array值-->
    <!--&ndash;&gt;-->
    <!--<select id="findUserByIds" parameterType="soft.demo3.pojo.QueryVo" resultType="soft.demo1.pojo.User">-->
        <!--<include refid="selector"/>-->
        <!--<where>-->
            <!--&#45;&#45; id in-->
            <!--<foreach collection="array" item="id" separator="," open="id in(" close=")">-->
                <!--#{id}-->
            <!--</foreach>-->
        <!--</where>-->
    <!--</select>-->
    <!--根据多个Id查询用户 (1,2,3)
         findUserByIds(List<Integer> idlist)方法实现
         使用此方法时 collection中应该填写list
    -->
    <select id="findUserByIds" parameterType="soft.demo3.pojo.QueryVo" resultType="soft.demo1.pojo.User">
        <include refid="selector"/>
        <where>
            -- id in
            <foreach collection="list" item="id" separator="," open="id in(" close=")">
                #{id}
            </foreach>
        </where>
    </select>

</mapper>